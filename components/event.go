package components

import (
	"github.com/claude42/infiltrator/util"
)

type UIEvent interface {
	util.Event

	Source() Component
}

type UIEventImpl struct {
	util.EventImpl

	source Component
}

func NewUIEventImpl(source Component) *UIEventImpl {
	ev := &UIEventImpl{source: source}
	ev.EventImpl.SetEventNow()
	return ev
}

func (ev *UIEventImpl) Source() Component {
	return ev.source
}

// Generated by InputImpl, FilterInput

type EventText struct {
	UIEventImpl

	text string
}

func NewEventText(text string, source Input) *EventText {
	ev := &EventText{
		UIEventImpl: *NewUIEventImpl(source),
		text:        text,
	}
	return ev
}

func (ev *EventText) Text() string {
	return ev.text
}

func (ev *EventText) Source() Input {
	return ev.source.(Input)
}

type EventSelectionChanged struct {
	UIEventImpl

	selected int
}

func NewEventSelectionChanged(selected int, source *Select) *EventSelectionChanged {
	ev := &EventSelectionChanged{
		UIEventImpl: *NewUIEventImpl(source),
		selected:    selected,
	}
	return ev
}

func (ev *EventSelectionChanged) Selected() int {
	return ev.selected
}

func (ev *EventSelectionChanged) Source() *Select {
	return ev.source.(*Select)
}
