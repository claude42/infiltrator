package ui

import (
	"time"

	"github.com/claude42/infiltrator/util"
)

// Generated by InputImpl, FilterInput

type EventText struct {
	util.EventImpl

	text string
}

func NewEventText(text string) *EventText {
	ev := &EventText{text: text}
	ev.EventImpl.SetWhen()
	return ev
}

func (ev *EventText) Text() string {
	return ev.text
}

func (ev *EventText) SetText(text string) {
	ev.text = text
}

type EventPressedEnterInInputField struct {
	util.EventImpl
}

func NewEventPressedEnterInInputField() *EventPressedEnterInInputField {
	ev := &EventPressedEnterInInputField{}
	ev.EventImpl.SetWhen()
	return ev
}

type EventPanelStateChanged struct {
	time       time.Time
	panelsOpen bool
}

// Generated by Window

func NewEventPanelStateChanged(panelsOpen bool) *EventPanelStateChanged {
	e := &EventPanelStateChanged{}
	e.time = time.Now()
	e.panelsOpen = panelsOpen

	return e
}

func (e *EventPanelStateChanged) When() time.Time {
	return e.time
}

func (e *EventPanelStateChanged) PanelsOpen() bool {
	return e.panelsOpen
}
