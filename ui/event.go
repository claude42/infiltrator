package ui

import (
	"github.com/claude42/infiltrator/components"
	"github.com/claude42/infiltrator/util"
)

// Generated by InputImpl, FilterInput

type EventPressedEnterInInputField struct {
	components.UIEventImpl
}

func NewEventPressedEnterInInputField(source components.Input) *EventPressedEnterInInputField {
	ev := &EventPressedEnterInInputField{
		UIEventImpl: *components.NewUIEventImpl(source),
	}
	return ev
}

func (ev *EventPressedEnterInInputField) Source() components.Input {
	return ev.UIEventImpl.Source().(components.Input)
}

// Generated by Window

type EventPanelStateChanged struct {
	util.EventImpl

	panelsOpen bool
}

func NewEventPanelStateChanged(panelsOpen bool) *EventPanelStateChanged {
	ev := &EventPanelStateChanged{panelsOpen: panelsOpen}
	ev.EventImpl.SetEventNow()

	return ev
}

func (e *EventPanelStateChanged) PanelsOpen() bool {
	return e.panelsOpen
}

// Generated by popups

type PopupState int

const (
	PopupPanelSelection PopupState = iota
	PopupHelp
	PopupNone = -1
)

type EventPopupStateChanged struct {
	components.UIEventImpl

	popupState PopupState
}

func NewEventPopupStateChanged(popupState PopupState, source components.Modal) *EventPopupStateChanged {
	ev := &EventPopupStateChanged{
		UIEventImpl: *components.NewUIEventImpl(source),
		popupState:  popupState,
	}
	return ev
}

func (e *EventPopupStateChanged) PopupType() PopupState {
	return e.popupState
}

func (ev *EventPopupStateChanged) Source() components.Modal {
	return ev.UIEventImpl.Source().(components.Modal)
}
